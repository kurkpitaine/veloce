use veloce_asn1::defs::etsi_102941_v221::etsi_ts102941_messages_ca::EtsiTs102941Data;
use veloce_asn1::defs::etsi_103097_v211::etsi_ts103097_module;
use veloce_asn1::prelude::*;

fn main() {
    let input_eu_ectl = include_bytes!("assets/eu_ectl_E3B49921E05A5953");
    let input_vw_ectl = include_bytes!("assets/vw_ectl_C8EAAB4C86EBCDD2");
    let input_vw_tlm = include_bytes!("assets/vw_tlm_C8EAAB4C86EBCDD2");

    let input_signed_mapem: [u8; 395] = [
        0x03, 0x81, 0x00, 0x40, 0x03, 0x80, 0x81, 0x9f, 0x20, 0x50, 0x04, 0x00, 0x00, 0x7b, 0x01,
        0x00, 0x3c, 0x00, 0x62, 0xa0, 0x72, 0x0e, 0x30, 0x00, 0x74, 0x4e, 0x3c, 0xd6, 0x1b, 0x60,
        0x80, 0x22, 0x03, 0x22, 0x18, 0xfd, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
        0xd3, 0x00, 0x00, 0x02, 0x05, 0x59, 0xcc, 0x0a, 0x27, 0x08, 0x00, 0x03, 0x80, 0xc2, 0x89,
        0x00, 0x03, 0x00, 0x01, 0x0a, 0x28, 0x82, 0xb0, 0x74, 0x37, 0x35, 0xf3, 0x92, 0x01, 0x4a,
        0x02, 0x8a, 0xd8, 0x04, 0x30, 0x29, 0x00, 0x00, 0x00, 0x80, 0x00, 0x23, 0x37, 0x35, 0xef,
        0xb6, 0x51, 0x05, 0x63, 0xcf, 0x33, 0x73, 0x5e, 0xa5, 0xe5, 0x10, 0x57, 0x00, 0xd3, 0x37,
        0x35, 0xe4, 0x3c, 0xd1, 0x05, 0x7d, 0xf8, 0x33, 0x73, 0x5d, 0xe8, 0x75, 0x10, 0x58, 0xac,
        0xb0, 0x48, 0x5c, 0x00, 0x00, 0x84, 0x05, 0x90, 0x00, 0x00, 0x10, 0x00, 0x04, 0x66, 0xe6,
        0xbe, 0x5e, 0x1a, 0x20, 0xab, 0x90, 0xa6, 0x6e, 0x6b, 0xf0, 0x40, 0xa2, 0x0a, 0xa0, 0xd8,
        0x66, 0xe6, 0xbf, 0x8f, 0x2a, 0x20, 0xa8, 0xcb, 0xc6, 0x6e, 0x6c, 0x01, 0x03, 0xa2, 0x0a,
        0x7a, 0x14, 0x40, 0x01, 0x8a, 0x00, 0x01, 0xf5, 0xc6, 0x51, 0xef, 0xa0, 0xc2, 0x81, 0x01,
        0x01, 0x80, 0x03, 0x00, 0x80, 0xfb, 0x9f, 0xe6, 0x57, 0x1f, 0x7c, 0xe7, 0xf9, 0x10, 0x83,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xdf, 0xf2, 0xce, 0x85, 0x00, 0x18, 0x01, 0x02, 0x80,
        0x01, 0x25, 0x81, 0x05, 0x04, 0x01, 0xff, 0xb6, 0x20, 0x80, 0x01, 0x24, 0x81, 0x04, 0x03,
        0x01, 0x80, 0x00, 0x80, 0x80, 0x82, 0xa9, 0xa7, 0xcf, 0x11, 0xd4, 0x00, 0xc4, 0x6e, 0x53,
        0x72, 0x4f, 0xfe, 0x14, 0x08, 0x1e, 0x0f, 0x84, 0x2c, 0x1c, 0x2c, 0x0b, 0xf9, 0x5a, 0xab,
        0xd4, 0x6d, 0xd6, 0xf2, 0x94, 0x44, 0x27, 0xea, 0x80, 0x80, 0x28, 0xc7, 0x22, 0xc0, 0x8c,
        0xf0, 0x25, 0x8b, 0x84, 0xdd, 0xcb, 0x55, 0xd4, 0x3c, 0xae, 0x88, 0x22, 0xe4, 0x51, 0x2d,
        0xca, 0xa1, 0x50, 0x3b, 0x92, 0x98, 0xbb, 0xca, 0x62, 0x16, 0x12, 0x51, 0x86, 0x45, 0xe6,
        0x6d, 0x64, 0x74, 0x90, 0xef, 0xe6, 0x45, 0x9d, 0x31, 0x51, 0x20, 0x21, 0x88, 0x5d, 0x86,
        0x5e, 0x50, 0xa4, 0x00, 0xcf, 0x66, 0x71, 0xba, 0x72, 0x82, 0x7b, 0x71, 0xda, 0x52, 0x80,
        0x80, 0x2e, 0x95, 0x78, 0x57, 0x3b, 0xca, 0xac, 0x8b, 0x04, 0x2b, 0xc8, 0xed, 0x8d, 0x89,
        0xde, 0x37, 0x90, 0x93, 0x32, 0x7f, 0xf4, 0x00, 0xa7, 0x22, 0x90, 0xbe, 0x14, 0x1c, 0xd1,
        0x51, 0xb0, 0xc5, 0x50, 0x7b, 0x32, 0x80, 0xb9, 0x31, 0xc9, 0x2b, 0xa8, 0x98, 0xd7, 0x3f,
        0x83, 0xc6, 0xc8, 0xa0, 0x7a, 0x09, 0x85, 0x81, 0xeb, 0x99, 0xdc, 0xdd, 0x44, 0x97, 0x39,
        0xed, 0x75, 0x6a, 0xd9, 0xd9,
    ];

    match rasn::coer::decode::<etsi_ts103097_module::EtsiTs103097Data>(input_eu_ectl) {
        Ok(d) => {
            println!("EU ECTL: {:?}\n", d);

            match rasn::coer::encode(&d) {
                Ok(e) => {
                    let matching = input_eu_ectl
                        .iter()
                        .zip(e.iter())
                        .filter(|&(a, b)| a == b)
                        .count();
                    assert!(matching == input_eu_ectl.len() && matching == e.len());
                }
                Err(e) => {
                    println!("Cannot encode EU ECTL: {}\n", e);
                }
            };
        }
        Err(e) => println!("Cannot decode EU ECTL: {}\n", e),
    }

    match rasn::coer::decode::<etsi_ts103097_module::EtsiTs103097Data>(input_vw_ectl) {
        Ok(d) => {
            println!("VW ECTL: {:?}\n", d);

            match &d.0.content {
                veloce_asn1::defs::etsi_103097_v211::ieee1609_dot2::Ieee1609Dot2Content::signedData(sd) => {
                    match &sd.tbs_data.payload.data.as_ref().unwrap().content {
                        veloce_asn1::defs::etsi_103097_v211::ieee1609_dot2::Ieee1609Dot2Content::unsecuredData(ud) => {
                            match rasn::coer::decode::<EtsiTs102941Data>(&ud.0) {
                                Ok(ed) => {
                                    println!("VW ECTL TS 102941 data: {}\n", rasn::jer::encode(&ed).unwrap());
                                },
                                Err(e) => {
                                    println!("Cannot encode VW ECTL TS 102941 data: {}\n", e);
                                },
                            }
                        },
                        _ => {},
                    }
                },
                _ => {},
            }

            match rasn::coer::encode(&d) {
                Ok(e) => {
                    let matching = input_vw_ectl
                        .iter()
                        .zip(e.iter())
                        .filter(|&(a, b)| a == b)
                        .count();
                    assert!(matching == input_vw_ectl.len() && matching == e.len());
                }
                Err(e) => {
                    println!("Cannot encode VW ECTL: {}\n", e);
                }
            };
        }
        Err(e) => println!("Cannot decode VW ECTL: {}\n", e),
    }

    match rasn::coer::decode::<etsi_ts103097_module::EtsiTs103097Certificate>(input_vw_tlm) {
        Ok(d) => {
            println!("VW TLM: {:?}\n", d);

            match rasn::coer::encode(&d) {
                Ok(e) => {
                    let matching = input_vw_tlm
                        .iter()
                        .zip(e.iter())
                        .filter(|&(a, b)| a == b)
                        .count();
                    assert!(matching == input_vw_tlm.len() && matching == e.len());
                }
                Err(e) => {
                    println!("Cannot encode VW TLM: {}\n", e);
                }
            };
        }
        Err(e) => println!("Cannot decode VW TLM: {}\n", e),
    }

    match rasn::coer::decode::<etsi_ts103097_module::EtsiTs103097DataSigned>(&input_signed_mapem) {
        Ok(d) => {
            println!("Signed MAPEM: {:?}\n", d);

            match rasn::coer::encode(&d) {
                Ok(e) => {
                    let matching = input_signed_mapem
                        .iter()
                        .zip(e.iter())
                        .filter(|&(a, b)| a == b)
                        .count();
                    assert!(matching == input_signed_mapem.len() && matching == e.len());
                }
                Err(e) => {
                    println!("Cannot encode signed MAPEM: {}\n", e);
                }
            };
        }
        Err(e) => println!("Cannot decode signed MAPEM: {}\n", e),
    }
}
